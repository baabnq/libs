use 'libs/stack.baabnq';
use 'libs/math.baabnq';
use 'libs/no.baabnq';

jump Chunk::Skip;

"(X::Int*) => (Len::Int)
lab Chunk::Len;
    sub Stack::Swap;
    
    "pull _x;
    "put _len <- _x - 1;
    "push _len - 1;
    "上記が遅いから「ASM」を使う
    
    asm '
    pla;
    set 1;
    sub;
    sAD -x;
    lPA -x;
    sub;
    pha;
    ';
    
    
    sub Stack::Swap;
    return;


"(X::Int*) => (Sum::Int)
"sum :: [Int] -> Int
"sum [] = 0
"sum (x:xs) = x + sum xs
lab Chunk::Sum;
    sub Stack::Swap;
    pull _x;
    
    push _i;
    
    push _x;
    sub Chunk::Len;
    pull _i;
    
    put _sum = 0;
    lab Chunk::Sum::Loop;
        put _i = _i - 1;
        put _data <- _x + _i;
        put _sum = _sum + _data;
    jump Chunk::Sum::Loop ~ _i > 0;
    
    pull _i;
    
    push _sum;
    sub Stack::Swap;
    return;


"(X::Int*) => (Avg::Int)
"avg :: [Int] -> Int
"avg x = sum x / len x
lab Chunk::Avg;
    sub Stack::Swap;    
    
    sub Stack::Dup;
    sub Chunk::Sum;
    sub Stack::Swap;
    sub Chunk::Len;
    
    sub Math::Div;
    
    sub Stack::Swap;
    return;


"(X::Int*, Fst::Int, Lst::Int, Bit::Int)
lab Chunk::LocalQuickRadix;
    sub Stack::Swap; pull _bit;
    sub Stack::Swap; pull _lst;
    sub Stack::Swap; pull _fst;
    sub Stack::Swap; pull _x;
    
    sub No::Return ~ _bit == 0;
    sub No::Return ~ _fst == _lst;
    sub No::Return ~ _fst >  _lst;
        
    put _i = _fst;
    put _j = _lst;
    
    lab Chunk::LocalQuickRadix::Loop;
        put __ <- _x + _i; put _bitI = __ & _bit;
        put __ <- _x + _j; put _bitJ = __ & _bit;
    
        jump Chunk::LocalQuickRadix::SwapSkip ~ _bitI == 0;
        jump Chunk::LocalQuickRadix::SwapSkip ~ _bitJ != 0;
            put _a <- _x + _i;
            put _b <- _x + _j;
            put _b -> _x + _i;
            put _a -> _x + _j;
                        
        lab Chunk::LocalQuickRadix::SwapSkip;

        push _i; sub Math::Inc ~ _bitI == 0; pull _i;
        push _j; sub Math::Dec ~ _bitJ != 0; pull _j;
            
    jump Chunk::LocalQuickRadix::Loop ~ _i < _j;
    jump Chunk::LocalQuickRadix::Loop ~ _i == _j;
    
    put _bitNext = _bit >> 1;
    
    "frame 2
    push _x;
    push _j + 1;
    push _lst;
    push _bitNext;
    "frame 1
    push _x;
    push _fst;
    push _i - 1;
    push _bitNext;
    "call for 1
    sub Chunk::LocalQuickRadix;
    "call for 2
    sub Chunk::LocalQuickRadix;
                
    return;


"(X::Int*)
lab Chunk::Sort;
lab Chunk::QuickRadix;
    sub Stack::Swap; pull _x;
    
    push _x;
    push 0;
    push _x; sub Chunk::Len; sub Math::Dec;
    push (1 << 15);

    sub Chunk::LocalQuickRadix;

    return;

"(X::A*, Elem::A) => (Index::Int)
"index :: Eq a => a -> [a] -> Maybe Int
"index x [] = Nothing
"index x (y:ys)
"    | x == y = Just 0
"    | otherwise = case (index x ys) of
"                    Nothing -> Nothing
"                    Just x  -> Just (x+1)
lab Chunk::Index;
    sub Stack::Swap;
    pull _elem;
    sub Stack::Swap;
    pull _x;
    
    push _i;
    
    push _x;
    sub Chunk::Len;
    pull _i;
    
    put _index = 0 - 1;
    lab Chunk::Index::Loop;
        put _i = _i - 1;
        put _data <- _x + _i;
        jump Chunk::Index::Skip ~ _data != _elem;
            put _index = _i;
        lab Chunk::Index::Skip;
    jump Chunk::Index::Loop ~ _i > 0;
    
    pull _i;
    
    push _index;
    sub Stack::Swap;
    return;


"(X::A*, Elem::A) => (Index::Int)
"count :: a -> [a] -> Int
"count x [] = 0
"count x (y:ys) = (count x ys) + (if x == y then 1 else 0)
lab Chunk::Count;
    sub Stack::Swap;
    pull _elem;
    sub Stack::Swap;
    pull _x;
    
    push _x;
    sub Chunk::Len;
    pull _i;
    
    put _count = 0;
    lab Chunk::Count::Loop;
        put _i = _i - 1;
        put _data <- _x + _i;
        jump Chunk::Count::Skip ~ _data != _elem;
            put _count = _count + 1;            
        lab Chunk::Count::Skip;
    jump Chunk::Count::Loop ~ _i > 0;
    
    push _count;
    sub Stack::Swap;
    return;

"(X::Int*)
"reverse :: [a] -> [a]
"reverse [] = []
"reverse (x:xs) = (reverse xs) ++ [x]
lab Chunk::Reverse;
    sub Stack::Swap;
    pull _start;

    push _start;
    sub Chunk::Len;
    pull _len;

    put _end = _start + _len - 1;
    
    lab Chunk::Reverse::Loop;
        put _a <- _start;
        put _b <- _end;
        put _b -> _start;
        put _a -> _end;
        
        put _start = _start + 1;
        put _end   = _end   - 1;        
    jump Chunk::Reverse::Loop ~ _start < _end;
    return;

"(X::Int*) => (Y::Int*)
lab Chunk::Copy;
    sub Stack::Swap;
    
    sub Stack::Dup;
    sub Chunk::Len;
    push 0;
    sub Stack::Swap;
    
    sub Chunk::Slice;

    sub Stack::Swap;
    return;
            
"(X::Int*, Start::Int, End::Int) => (Y::Int*)
lab Chunk::Slice;
    sub Stack::Swap; pull _end;
    sub Stack::Swap; pull _start;
    sub Stack::Swap; pull _x;
    
    put _len = _end - _start;
    new _len _y;
    
    put _i = 0;
    lab Chunk::Slice::Loop;
        put _data <- _x + _i + _start;
        put _data -> _y + _i;
        
        put _i = _i + 1;
    jump Chunk::Slice::Loop ~ _i < _len;
    
    push _y;
    sub Stack::Swap;
    return;
    
    

"(X::Int*, Start::Int, End::Int)
"range :: Int -> Int -> [Int]
"range x x = []
"range s e = [s] ++ range (s+1) e
lab Chunk::Range;
    sub Stack::Swap; pull _end;
    sub Stack::Swap; pull _start;
    sub Stack::Swap; pull _x;
    
    lab Chunk::Range::Loop;
        put _start -> _x;
        put _x = _x + 1;
        put _start = _start + 1;
    jump Chunk::Range::Loop ~ _start < _end;
        
    return;


"(X::Int*) => (Min::Int)
"min :: [Int] -> Int
"min [] = minBound :: Int
"min (x:xs) = if m < x then m else x
"   where m = min xs
lab Chunk::Min;
    sub Stack::Swap;
    pull _x;

    push _x;
    sub Chunk::Len;
    pull _len;
            
    put _min = 0 - 1;
    put _i = 0;
    lab Chunk::Min::Loop;
        put _data <- _x + _i;
        jump Chunk::Min::Skip ~ _data > _min;
            put _min = _data;
        lab Chunk::Min::Skip;
        put _i = _i + 1;
    jump Chunk::Min::Loop ~ _i < _len;

    push _min;
    sub Stack::Swap;
    return;

"(X::Int*) => (Max::Int)
"max :: [Int] -> Int
"max [] = maxBound :: Int
"max (x:xs) = if m > x then m else x
"   where m = min xs
lab Chunk::Max;
    sub Stack::Swap;
    pull _x;
    
    push _x;
    sub Chunk::Len;
    pull _len;

    put _max = 0;
    put _i = 0;
    lab Chunk::Max::Loop;
        put _data <- _x + _i;
        jump Chunk::Max::Skip ~ _data < _max;
            put _max = _data;
        lab Chunk::Max::Skip;
        put _i = _i + 1;
    jump Chunk::Max::Loop ~ _i < _len;

    push _max;
    sub Stack::Swap;
    return;




"(A::Int*, B::Int*) => (X::Int*)
"concat :: [a] -> [a] -> [a]
"concat []     x = x
"concat (a:ax) b = a : concat ax b
lab Chunk::Concat;
    sub Stack::Swap; pull _b;
    sub Stack::Swap; pull _a;
    
    push _a; sub Chunk::Len; pull _lenA;
    push _b; sub Chunk::Len; pull _lenB;
            
    put _endA = _a + _lenA;
    put _endB = _b + _lenB;
            
    new (_lenA + _lenB) _x;
    put _p = _x;
    
    lab Chunk::Concat::LoopA;
        put __ <- _a; put _a = _a + 1;
        put __ -> _p; put _p = _p + 1;
    jump Chunk::Concat::LoopA ~ _a < _endA;
        
    lab Chunk::Concat::LoopB;
        put __ <- _b; put _b = _b + 1;
        put __ -> _p; put _p = _p + 1;
    jump Chunk::Concat::LoopB ~ _b < _endB;

    push _x;
    sub Stack::Swap;
    return;
    

"(X::Int*, V::Int) => (Bool)
"contains :: [a] -> a -> Bool
"contains []     _ = False
"contains (x:xs) v = x == v || contains xs v   
lab Chunk::Contains;
lab Chunk::In;
    sub Stack::Swap; pull _v;
    sub Stack::Swap; pull _x;
    
    push _x;
    sub Chunk::Len;
    pull _len;

    put _ptr = _x + _len;
    lab Chunk::Contains::Loop;
        put _ptr = _ptr - 1;
        put __ <- _ptr;
        jump Chunk::Contains::Found ~ __ == _v;
    jump Chunk::Contains::Loop ~ _ptr > _x;
    
        push 0;
        sub Stack::Swap;
        return;
    
    lab Chunk::Contains::Found;
        push 1;
        sub Stack::Swap;
        return;


"(A::Int*, B::Int*) => (Match::Bool)
"compare :: [a] -> [a] -> Bool
"compare [] [] = True
"compare []  _ = False
"compare _  [] = False
"compare (x:xs) (y:ys) = x == y && compare xs ys
lab Chunk::Compare;
lab Chunk::Cmp;
    sub Stack::Swap; pull _y;
    sub Stack::Swap; pull _x;
    
    
    push _x; sub Chunk::Len; pull _lenX;
    push _y; sub Chunk::Len; pull _lenY;
            
    push _i;

    "check length
    jump Chunk::Compare::False ~ _lenX != _lenY;

    "check content
    put _i = 0;
    lab Chunk::Compare::Loop;
        put _a <- _x + _i;
        put _b <- _y + _i;
        jump Chunk::Compare::False ~ _a != _b;
        put _i = _i + 1;
    jump Chunk::Compare::Loop ~ _i < _lenX;
    
        pull _i;
        push 1;
        sub Stack::Swap;
        return;

    lab Chunk::Compare::False;
        pull _i;
        push 0;
        sub Stack::Swap;
        return;
    
    
    
"(X::Int*) => (Hash::Int)
lab Chunk::DJB2;
lab Chunk::Hash;
    sub Stack::Swap;
    pull _x;
    
    push _i;
    
    push _x;
    sub Chunk::Len;
    pull _len;
        
    put _hash = 5381;
    
    put _i = 0;
    lab Chunk::Hash::Loop;
        put __ <- _x + _i;
        put _hash = ((_hash << 5) + _hash) + __;
        put _i = _i + 1;
    jump Chunk::Hash::Loop ~ _i < _len;
    
    pull _i;
    
    push _hash;
    sub Stack::Swap;
    return;
    
    
    
    
"(X::Int*)
"clear [Int] -> [Int]
"clear []     = []
"clear (x:xs) = 0 : clear xs
lab Chunk::Clear;
    "this does some stack magic and fall-through.
    "stack frame diagrams are placed between each statement
    "to illustrate the process of manipulation.
    
    "| return address |
    "|   (X::Int*)    |
    "------------------
    
    push 0;
    
    "|   0 (V::Int)   |
    "| return address |
    "|   (X::Int*)    |
    "------------------    
        
    sub Stack::Swap;

    "| return address |
    "|   0 (V::Int)   |
    "|   (X::Int*)    |
    "------------------    

    "this matches the routine signature of Chunk::Fill,
    "so the fall-through will proceed without error.

    "it effectively calls Chunk::Fill like this:
        "push _x;
        "push 0;
        "sub Chunk::Fill;

"(X::Int*, V::Int)
"fill [Int] -> Int -> [Int]
"fill []     _ = []
"fill (x:xs) v = v : fill xs v
lab Chunk::Fill;
    sub Stack::Swap; pull _v;
    sub Stack::Swap; pull _x;
    
    push _i;
    
    push _x;
    sub Chunk::Len;
    pull _len;
    
    put _i = 0;
    lab Chunk::Fill::Loop;
        put _v -> _x + _i;
        put _i = _i + 1;
    jump Chunk::Fill::Loop ~ _i < _len;
    
    pull _i;
    return;



"(X::Int*) => IO
lab Chunk::Print;
    sub Stack::Swap;
    pull _x;
    
    push _x;
    sub Chunk::Len;
    pull _len;
        
    push _i;
    
    put _i = 0;
    lab Chunk::Print::Loop;
        put _data <- _x + _i;
        print _data;
        put _i = _i + 1;
    jump Chunk::Print::Loop ~ _i < _len;
    
    pull _i;

    return;





lab Chunk::Skip;
